import Head from 'next/head'
import { useContext, useEffect, useRef, useState } from 'react'
import About from '../components/About'
import Blog from '../components/Blog'
import Hero from '../components/Hero'
import Layout from '../components/Layout'
import Portfolio from '../components/Portfolio'
import styles from '../styles/Home.module.css'
import { gsap } from "gsap";
import CursorContext from '../context/CursorContext'
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";

export default function Home({ devDotToPosts }) {
  gsap.registerPlugin(ScrollTrigger);
  const cursor = useRef(null)
  const follower = useRef(null)
  const preloader = useRef(null)
  const content = useRef(null)
  const { grow, light } = useContext(CursorContext)

  useEffect(() => {
    const body = document.body
    const tl = gsap.timeline({defaults: {ease: "power4.inOut"}})
    
    tl.to(preloader.current.children, {
      clipPath: 'polygon(0% 100%, 100% 100%, 100% 0%, 0% 0%)',
      duration: 1,
      })
      .to(preloader.current,
      {
          y: '-110%',
          duration: 1,
        })
      .to(preloader.current,
      {
          zIndex: '-10000'
      })
      .to(body,
      {
        overflowY: 'auto',
      })
      

    document.addEventListener('mousemove', (e) => {
      const { clientX, clientY } = e;

      const mouseX = clientX;
      const mouseY = clientY;
      
      cursor.current?.style.transform = `translate3d(${mouseX - cursor.current.clientWidth / 2}px, ${mouseY - cursor.current.clientHeight / 2}px, 0)`
      

      gsap.to(follower.current,
        {
          transform: `translate3d(${mouseX - follower.current.clientWidth / 2}px, ${mouseY - follower.current.clientHeight / 2}px, 0)`,
          ease: "none",
          stagger: 0.1,
        })
    })
  }, [])


  return (
    <>
    <div className={styles.container} ref={content}>
      <Head>
        <title>Cindy Arbelaez Front End Developer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <main>
          <Hero />
          <About />
          <Portfolio />
          <Blog data={devDotToPosts}/>
        </main>
      </Layout>
      <div className={styles.preLoader} ref={preloader}>
        <h2 className={styles.preLoaderText}>CinArb/</h2>
      </div>
    </div>
      <div className={`${styles.cursor} ${light ? styles.light : ''}`} ref={cursor}></div>
      <div
        className={`${styles.follower} 
        ${grow ? styles.grow : ''}
        ${light ? styles.light : ''}
        `} ref={follower}>
      </div>
      <div className={styles.bgColor}></div>
      <div className={styles.bgImage}></div>
    </>
  )
}

export const getStaticProps = async () => {
  const devDotToPosts = await fetch(
    `https://dev.to/api/articles?username=${process.env.DEV_USERNAME}`
  );
  
  const res = await devDotToPosts.json();
  return {
    props: {
      devDotToPosts: res
    },
    revalidate: 10,
  };
};